View(listings_accommodates)
View(listings_accommodates)
runApp('C:/Users/niang/Desktop/Ibrahima.Projet_Airbnb')
runApp('C:/Users/niang/Desktop/Ibrahima.Projet_Airbnb')
runApp('C:/Users/niang/Desktop/Ibrahima.Projet_Airbnb')
install.packages("pivottabler")
library(pivottabler)
qpvt(bhmtrains, "TOC", "TrainCategory", "n()")
data("bhmtrains")
data(bhmtrains)
View(bhmtrains)
qpvt(bhmtrains,index="TOC",values="SchedSpeedMPH")
qpvt(bhmtrains,index="TOC")
qpvt(bhmtrains,index="TOC", "sum")
qpvt(bhmtrains, "TOC", "TrainCategory", "n()")
source("modules/global.R", local = TRUE, encoding='UTF-8')
source("modules/Mise_en_place_data.R", local = TRUE, encoding='UTF-8')
source("modules/global.R", local = TRUE, encoding='UTF-8')
source("global.R", encoding='UTF-8')
source("Mise_en_place_data.R", encoding='UTF-8')
rm(list=ls())
##définir l'emplacement actuel du fichier comme répertoire de travail par défaut dans
## la programmation R
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
Encoding(current_path) <- "UTF-8"
setwd(dirname(current_path ))
source("global.R", encoding='UTF-8')
View(temp)
if(!require("pool")){
install.packages("pool")
}
library(pool)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(result)
runApp()
runApp()
runApp()
runApp()
runApp()
View(result)
View(dispo_alim)
runApp()
runApp()
runApp()
runApp()
View(cereals_for_feed_food)
install.packages("shiny")
install.packages("shiny")
if(!require("shiny")){
install.packages("shiny")
}
if(!require("shinydashboard")){
install.packages("shinydashboard")
}
if(!require("plyr")){
install.packages("plyr")
}
if(!require("plotly")){
install.packages("plotly")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("rmarkdown")){
install.packages("rmarkdown")
}
if(!require("data.table")){
install.packages("data.table")
}
if(!require("shinyalert")){
install.packages("shinyalert")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("stringr")){
install.packages("stringr")
}
if(!require("DT")){
install.packages("DT")
}
if(!require("tidyverse")){
install.packages("tidyverse")
}
if(!require("ggthemes")){
install.packages("ggthemes")
}
if(!require("leaflet")){
install.packages("leaflet")
}
if(!require("gridExtra")){
install.packages("gridExtra")
}
if(!require("reshape2")){
install.packages("reshape2")
}
if(!require("RMySQL")){
install.packages("RMySQL")
}
if(!require("ggthemes")){
install.packages("ggthemes")
}
if(!require("crosstalk")){
install.packages("crosstalk")
}
if(!require("readr")){install.packages("readr")
}
if(!require("lubridate")){install.packages("lubridate")
}
if(!require("gridExtra")){
install.packages("gridExtra")
}
if(!require("magrittr")){install.packages("magrittr")
}
if(!require("rAmCharts")){install.packages("rAmCharts")
}
install.packages("rAmCharts")
if(!require("rAmCharts")){install.packages("rAmCharts")
}
if(!require("shinyWidgets")){ install.packages("shinyWidgets")
}
install.packages("shinyWidgets")
if(!require("shinyWidgets")){ install.packages("shinyWidgets")
}
if(!require("shinycssloaders")){ install.packages("shinycssloaders")
}
install.packages("shinycssloaders")
if(!require("shinycssloaders")){ install.packages("shinycssloaders")
}
if(!require("formattable")){ install.packages("formattable")
}
install.packages("formattable")
if(!require("formattable")){ install.packages("formattable")
}
if(!require("devtools")){
install.packages("devtools")
}
install.packages("devtools")
if(!require("shinyjs")){
install.packages("shinyjs")
}
install.packages("shinyjs")
install.packages("shinyjs")
if(!require("V8")){
install.packages("V8")
}
install.packages("V8")
if(!require("V8")){
install.packages("V8")
}
library(readr)
library(lubridate)
library(magrittr)
library(rAmCharts)
library(data.table)
library(shinyWidgets)
library(shinycssloaders)
library(crosstalk)
library(shinyjqui)
library(gridExtra)
library(stringr)
library(flexdashboard)
library(devtools)
library(shinyjs)
library(V8)
library(shiny)
library(shinydashboard)
library(plyr)
library(plotly)
library(ggplot2)
library(data.table)
library(shinyalert)
library(dplyr)
library(stringr)
library(DT)
library(tidyverse) # includes ggplot2
library(ggthemes) # includes pre-made themes we'll use near the end
library(leaflet)
library(rmarkdown)
library(gridExtra)
library(reshape2)
library(RMySQL)
if(!require("flexdashboard")){
install.packages("flexdashboard")
}
install.packages("flexdashboard")
if(!require("flexdashboard")){
install.packages("flexdashboard")
}
library(flexdashboard)
runApp()
View(cereals_for_feed_food)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(cereals_for_feed_food)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(aliments_plus_caloriques_ou_plus_proteines)
View(aliments_plus_caloriques_ou_plus_proteines)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(dispo_alim_mondiale)
View(dispo_int_vegetal)
View(dispo_alim)
View(dispo_alim_food_feed_waste)
View(dispo_alim_mondiale)
View(dispo_int_vegetal)
View(dispo_int_vegetal)
runApp()
runApp()
runApp()
View(dispo_int_vegetal)
runApp()
runApp()
runApp()
View(dispo_alim)
View(dispo_int_vegetal)
runApp()
ggplot(dispo_int_vegetal, aes(x=année, y=dom_sup_Kcal))+
geom_line(colour="blue") +
xlab("année")
ggplot(dispo_int_vegetal, aes(x=année, y=dom_sup_kgprot))+
geom_line(colour="green") +
xlab("année")
ggplot(dispo_int_vegetal, aes(x=année, y=dom_sup_Kcal))+
geom_line(colour="blue") +
xlab("année") +
ggplot(dispo_int_vegetal, aes(x=année, y=dom_sup_kgprot))+
geom_line(colour="green") +
xlab("année")
ggplot(dispo_int_vegetal) +
geom_line(colour="green", mapping = aes(x = année, y=dom_sup_Kcal)) +
geom_line(colour="blue", mapping = aes(x = année, y=dom_sup_kgprot)) +
xlab("année")
ggplot(dispo_int_vegetal, aes(x=année, y=dom_sup_Kcal))+
geom_line(colour="blue") +
xlab("année")
ggplot(dispo_int_vegetal, aes(x=année, y=dom_sup_kgprot))+
geom_line(colour="green") +
xlab("année")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(dispo_int_vegetal)
# résultats en termes de calories
nb_humains <- dispo_int_vegetal$dom_sup_Kcal / 365 / NB_KCAL_PER_CAPITA_PER_DAY
print(paste0("Population potentiellement nourrie par la disponibilité intérieure en produits issus de végétaux (en termes calorifiques) : ",
round(nb_humains/1000000,2), " Millards, soit ", round(100*nb_humains/dispo_int_vegetal$total_pop, 1), " % de la population mondiale"))
runApp()
runApp()
runApp()
# résultats en termes de calories
nb_humains <- dispo_int_vegetal$dom_sup_Kcal / 365 / NB_KCAL_PER_CAPITA_PER_DAY
print(paste0("Population potentiellement nourrie par la disponibilité intérieure en produits issus de végétaux (en termes calorifiques) : ",
round(nb_humains/1000000,2), " Millards, soit ", round(100*nb_humains/dispo_int_vegetal$total_pop, 1), " % de la population mondiale"))
# résultats en termes de protéines
nb_humains <- dispo_int_vegetal$dom_sup_kgprot / 365 / KG_PROT_PER_CAPITA_PER_DAY
runApp()
# résultats en termes de calories
nb_humains <- dispo_int_vegetal$dom_sup_Kcal / 365 / NB_KCAL_PER_CAPITA_PER_DAY
print(paste0("Population potentiellement nourrie par la disponibilité intérieure en produits issus de végétaux (en termes calorifiques) : ",
round(nb_humains/1000000,2), " Millards, soit ", round(100*nb_humains/dispo_int_vegetal$total_pop, 1), " % de la population mondiale"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# résultats en termes de calories
nb_humains <- dispo_int_vegetal$dom_sup_Kcal / 365 / NB_KCAL_PER_CAPITA_PER_DAY
print(paste0("Population potentiellement nourrie par la disponibilité intérieure en produits issus de végétaux (en termes calorifiques) : ",
round(nb_humains/1000000,2), " Millards, soit ", round(100*nb_humains/dispo_int_vegetal$total_pop, 1), " % de la population mondiale"))
# résultats en termes de protéines
nb_humains <- dispo_int_vegetal$dom_sup_kgprot / 365 / KG_PROT_PER_CAPITA_PER_DAY
print(paste0("Population potentiellement nourrie par la disponibilité intérieure en produits issus de végétaux (en termes de protéines) : ",
round(nb_humains/1000000,2), " Millards, soit ", round(100*nb_humains/dispo_int_vegetal$total_pop, 1), " % de la population mondiale"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# résultats en termes de calories
nb_humains <- dispo_alim_mondiale$food_supply_kcal / 365 / NB_KCAL_PER_CAPITA_PER_DAY
print(paste0("Population potentiellement nourrie par la disponibilité alimentaire mondiale (en termes calorifiques) : ",
round(nb_humains/1000000,2), " Millards, soit ", round(100*nb_humains/dispo_alim_mondiale$total_pop, 1), " % de la population mondiale"))
# résultats en termes de protéines
nb_humains = dispo_alim_mondiale$food_supply_kgprotein / 365 / KG_PROT_PER_CAPITA_PER_DAY
print(paste0("Population potentiellement nourrie par la disponibilité alimentaire mondiale (en termes de protéines) : ",
round(nb_humains/1000000,2), " Millards, soit ", round(100*nb_humains/dispo_alim_mondiale$total_pop, 1), " % de la population mondiale"))
runApp()
View(liste_pays_en_sous_nutrition)
View(Liste_15_produits_plus_exportes)
View(Importations)
View(Importations_par_produit)
View(Importations)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Importations_par_produit)
View(Importations)
View(Importations_par_produit)
runApp()
runApp()
View(Sous_nutrition)
View(Sous_nutrition_en_Thaïlande)
View(Sous_nutrition)
View(result_Exportation)
View(nb_persons_undernourished)
View(Exportations_Manioc_en_Thaïlande)
runApp()
runApp()
runApp()
View(equilibre_prod)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if(!require("pool")){
install.packages("pool")
}
if(!require("pool")){
install.packages("pool")
}
library(pool)
## connect to database (don't forget to disconnect)
pool <- dbPool(
drv = RMySQL::MySQL(),
dbname = "projet_fao",
host = "localhost",
username = "root",
password = "Traore160410@"
)
rm(list=ls())
##définir l'emplacement actuel du fichier comme répertoire de travail par défaut dans
## la programmation R
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
Encoding(current_path) <- "UTF-8"
setwd(dirname(current_path ))
source("global.R", encoding='UTF-8')
## connect to database (don't forget to disconnect)
pool <- dbPool(
drv = RMySQL::MySQL(),
dbname = "projet_fao",
host = "localhost",
username = "root",
password = "Traore160410@"
)
library(pool)
runApp()
## connect to database (don't forget to disconnect)
pool <- dbPool(
drv = RMySQL::MySQL(),
dbname = "projet_fao",
host = "localhost",
username = "root",
password = "Traore160410@"
)
install.packages("pool")
runApp()
#Query SQL
## connect to database (don't forget to disconnect)
DB <- dbConnect(MySQL(),
user="root",
host="localhost",
password="Traore160410@",
dbname="projet_fao")
dbListTables(DB) # list tables
dbSendQuery(DB, "SET GLOBAL local_infile = true;")
dbDisconnect(DB)
#Query SQL
## connect to database (don't forget to disconnect)
DB <- dbConnect(MySQL(),
user="root",
host="localhost",
password="Traore160410@",
dbname="projet_fao")
dbListTables(DB) # list tables
dbDisconnect(DB)
#Query SQL
## connect to database (don't forget to disconnect)
DB <- dbConnect(MySQL(),
user="root",
host="localhost",
password="Traore160410@",
dbname="projet_fao")
dbListTables(DB) # list tables
### importer un tableau de MySQL dans R
dispo_alim_habitant <- dbReadTable(DB, "dispo_alim_habitant")
View(dispo_alim_habitant)
### Exécuter une requête SQL
dispo_alim_pays <-
dbGetQuery(DB, "SELECT * FROM
(SELECT
ROW_NUMBER() OVER(PARTITION BY année) AS POSITION,
année,
pays,
percentage_protein_habitant
FROM
(SELECT année, pays, SUM(percentage_protein_habitant) As percentage_protein_habitant
FROM dispo_alim_habitant
GROUP BY année, pays
ORDER BY année, percentage_protein_habitant) As temp) As result
WHERE POSITION <= 10;")
View(dispo_alim_pays)
### Exécuter une requête SQL
dispo_alim_pays <-
dbGetQuery(DB, "SELECT * FROM
(SELECT
ROW_NUMBER() OVER(PARTITION BY année) AS POSITION,
année,
pays,
percentage_protein_habitant
FROM
(SELECT année, pays, SUM(percentage_protein_habitant) As percentage_protein_habitant
FROM dispo_alim_habitant
GROUP BY année, pays
ORDER BY année, percentage_protein_habitant) As temp) As result;")
View(dispo_alim_pays)
dbDisconnect(DB)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(population)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
